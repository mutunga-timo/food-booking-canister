type FoodBooking = record {
  id : text;
  deliveryAddress : text;
  createdAt : nat64;
  updatedAt : opt nat64;
  quantity : nat8;
  delivered : bool;
  reserver_principal : principal;
  foodName : text;
};
type FoodBookingPayload = record {
  deliveryAddress : text;
  quantity : nat8;
  foodName : text;
};
type _AzleResult = variant { Ok : FoodBooking; Err : text };
type _AzleResult_1 = variant { Ok : float64; Err : text };
type _AzleResult_2 = variant { Ok : vec FoodBooking; Err : text };
service : () -> {
  addFoodBooking : (FoodBookingPayload) -> (_AzleResult);
  countFoodBookings : () -> (_AzleResult_1) query;
  deleteFoodBooking : (text) -> (_AzleResult);
  getFoodBooking : (text) -> (_AzleResult) query;
  getFoodBookings : () -> (_AzleResult_2) query;
  getFoodBookingsByTimeRange : (nat64, nat64) -> (_AzleResult_2) query;
  getFoodBookingsPaginated : (nat8, nat8) -> (_AzleResult_2) query;
  markFoodBookingAsDelivered : (text) -> (_AzleResult);
  searchFoodBookings : (text) -> (_AzleResult_2) query;
  updateFoodBooking : (text, FoodBookingPayload) -> (_AzleResult);
}